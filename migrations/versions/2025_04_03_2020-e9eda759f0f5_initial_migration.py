"""Initial migration

Revision ID: e9eda759f0f5
Revises:
Create Date: 2025-04-03 20:20:19.603157+00:00

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "e9eda759f0f5"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "features",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("icon_url", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_features_id"), "features", ["id"], unique=False)
    op.create_table(
        "parks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "park_type",
            sa.Enum(
                "STREET",
                "VERT",
                "BOWL",
                "PLAZA",
                "DIY",
                "INDOOR",
                "HYBRID",
                name="parktype",
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "ACTIVE",
                "CLOSED_TEMPORARILY",
                "CLOSED_PERMANENTLY",
                "UNDER_CONSTRUCTION",
                "PLANNED",
                name="parkstatus",
            ),
            nullable=True,
        ),
        sa.Column("address", sa.String(length=255), nullable=True),
        sa.Column("city", sa.String(length=100), nullable=False),
        sa.Column("state", sa.String(length=100), nullable=True),
        sa.Column("country", sa.String(length=100), nullable=False),
        sa.Column("postal_code", sa.String(length=20), nullable=True),
        sa.Column("latitude", sa.Float(), nullable=True),
        sa.Column("longitude", sa.Float(), nullable=True),
        sa.Column("is_free", sa.Boolean(), nullable=True),
        sa.Column(
            "opening_hours", postgresql.JSON(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("website_url", sa.String(length=255), nullable=True),
        sa.Column("phone_number", sa.String(length=50), nullable=True),
        sa.Column("email", sa.String(length=100), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("tags", postgresql.ARRAY(sa.String()), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_parks_id"), "parks", ["id"], unique=False)
    op.create_index(op.f("ix_parks_name"), "parks", ["name"], unique=False)
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(length=50), nullable=False),
        sa.Column("email", sa.String(length=120), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column(
            "role", sa.Enum("ADMIN", "MODERATOR", "USER", name="role"), nullable=True
        ),
        sa.Column("is_verified", sa.Boolean(), nullable=True),
        sa.Column("two_factor_enabled", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("last_login_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("profile_picture_url", sa.String(length=255), nullable=True),
        sa.Column("bio", sa.String(length=500), nullable=True),
        sa.Column("settings", postgresql.JSON(astext_type=sa.Text()), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)
    op.create_table(
        "park_features",
        sa.Column("park_id", sa.Integer(), nullable=False),
        sa.Column("feature_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["feature_id"],
            ["features.id"],
        ),
        sa.ForeignKeyConstraint(
            ["park_id"],
            ["parks.id"],
        ),
        sa.PrimaryKeyConstraint("park_id", "feature_id"),
    )
    op.create_table(
        "park_photos",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("park_id", sa.Integer(), nullable=False),
        sa.Column("url", sa.String(length=255), nullable=False),
        sa.Column("caption", sa.String(length=255), nullable=True),
        sa.Column("is_primary", sa.Boolean(), nullable=True),
        sa.Column("uploaded_by", sa.Integer(), nullable=True),
        sa.Column("uploaded_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["park_id"],
            ["parks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["uploaded_by"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_park_photos_id"), "park_photos", ["id"], unique=False)
    op.create_table(
        "park_ratings",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("park_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("rating", sa.Integer(), nullable=False),
        sa.Column("review", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["park_id"],
            ["parks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_park_ratings_id"), "park_ratings", ["id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_park_ratings_id"), table_name="park_ratings")
    op.drop_table("park_ratings")
    op.drop_index(op.f("ix_park_photos_id"), table_name="park_photos")
    op.drop_table("park_photos")
    op.drop_table("park_features")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_parks_name"), table_name="parks")
    op.drop_index(op.f("ix_parks_id"), table_name="parks")
    op.drop_table("parks")
    op.drop_index(op.f("ix_features_id"), table_name="features")
    op.drop_table("features")
    # ### end Alembic commands ###
